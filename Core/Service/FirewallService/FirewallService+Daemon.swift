import Cocoa
import MagicCore
import NetworkExtension
import OSLog
import SwiftUI
import SystemExtensions

extension FirewallService {
    /// Ë¥üË¥£ÂÜ≥ÂÆöÊòØÂê¶ÂÖÅËÆ∏ÁΩëÁªúËøûÊé•Ôºå‰∏éËßÜÂõæÊó†ÂÖ≥ÔºåAPPÂêØÂä®Â∞±ËøêË°å
    func runDaemon() async {
        if #available(macOS 15.1, *) {
            os_log("\(self.t)üö© ÁõëÂê¨Á≥ªÁªüÊâ©Â±ïÁä∂ÊÄÅ")
            do {
                try OSSystemExtensionsWorkspace.shared.addObserver(self)
            } catch {
                os_log(.error, "\(error)")
            }
        } else {
            // Fallback on earlier versions
        }

        // loadFilterConfiguration ÁÑ∂Âêé filterManager.isEnabled ÊâçËÉΩÂæóÂà∞Ê≠£Á°ÆÁöÑÂÄº
        do {
            try await loadFilterConfiguration(reason: "Boot")
        } catch {
            os_log(.error, "\(self.t)Boot -> \(error)")
        }

        // ‰∏çÁÆ°Á≥ªÁªüÊâ©Â±ïÊòØÂê¶ÊøÄÊ¥ªÔºåÂ∞ùËØïÂÖ≥ËÅîÔºåÂ§±Ë¥•‰∫Ü‰πüÊ≤°ÂÖ≥Á≥ª
        self.registerWithProvider(reason: "init")
    }
}

// MARK: Content Filter Configuration Management

extension FirewallService {
    private func loadFilterConfiguration(reason: String) async throws {
        os_log("\(self.t)üö© ËØªÂèñËøáÊª§Âô®ÈÖçÁΩÆ üêõ \(reason)")

        // You must call this method at least once before calling saveToPreferencesWithCompletionHandler: for the first time after your app launches.
        try await NEFilterManager.shared().loadFromPreferences()
    }

    func registerWithProvider(reason: String) {
        os_log("\(self.t)üõ´ registerWithProviderÔºåËÆ© ChannelProvider Âíå Extension ÂÖ≥ËÅîËµ∑Êù• üêõ (\(reason))")

        IPCConnection.shared.register(withExtension: ExtensionConfig.extensionBundle, delegate: self) { success in
            if success {
                os_log("\(self.t)‚õìÔ∏è ChannelProvider Âíå Extension ÂÖ≥ËÅîÊàêÂäü")
            } else {
                os_log(.error, "\(self.t)üíî ChannelProvider Âíå Extension ÂÖ≥ËÅîÂ§±Ë¥•")
            }
        }
    }
}

// MARK: AppCommunication

extension FirewallService: AppCommunication {
    nonisolated func extensionLog(_ words: String) {
        let verbose = false

        if verbose {
            os_log("\(self.t)üí¨ Extension said -> \(words)")
        }
    }

    nonisolated func needApproval() {
        NotificationCenter.default.post(
            name: .firewallNeedApproval,
            object: nil,
            userInfo: nil
        )
    }

    /// ÊèêÁ§∫Áî®Êà∑ÊòØÂê¶ÂÖÅËÆ∏ÁΩëÁªúËøûÊé•
    /// - Parameters:
    ///   - id: Â∫îÁî®Ê†áËØÜÁ¨¶
    ///   - hostname: ‰∏ªÊú∫Âêç
    ///   - port: Á´ØÂè£Âè∑
    ///   - direction: ÁΩëÁªúÊµÅÈáèÊñπÂêë
    ///   - responseHandler: ÂìçÂ∫îÂ§ÑÁêÜÂõûË∞É
    nonisolated func promptUser(id: String, hostname: String, port: String, direction: NETrafficDirection, responseHandler: @escaping (Bool) -> Void) {
        let verbose = false
        let printAllowed = true
        let printDenied = true

        let shouldAllow = self.settingRepo.shouldAllowSync(id)
        let dto = FirewallEventDTO(
            id: id,
            time: .now,
            address: hostname,
            port: port,
            sourceAppIdentifier: id,
            status: shouldAllow ? .allowed : .rejected,
            direction: direction,
            appId: id
        )

        if shouldAllow {
            #if DEBUG
            if verbose && printAllowed {
                os_log("\(self.t)‚úÖ \(id)")
            }
            #endif
            
            responseHandler(true)
        } else {
            #if DEBUG
            if verbose && printDenied {
                os_log("\(self.t)üà≤ \(id)")
            }
            #endif

            responseHandler(false)
        }

        // Â∞Ü‰∫ã‰ª∂Â≠òÂÇ®Âà∞Êï∞ÊçÆÂ∫ì
        let eventRepo = self.eventRepo
        Task {
            do {
                try await eventRepo.createFromDTO(dto)
            } catch {
                os_log(.error, "\(Self.t)‚ùå Â≠òÂÇ®‰∫ã‰ª∂Âà∞Êï∞ÊçÆÂ∫ìÂ§±Ë¥•: \(error)")
            }
        }
    }
}

#Preview("APP") {
    RootView(content: {
        ContentView()
    })
    .frame(width: 700)
    .frame(height: 600)
}
